{
  "version": 3,
  "sources": ["../../../app/context/CartContext.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/context/CartContext.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/context/CartContext.tsx\");\n  import.meta.hot.lastModified = \"1746187567104.1323\";\n}\n// REMIX HMR END\n\nimport { createContext, useContext, useReducer, useEffect, useState } from \"react\";\nconst CartContext = createContext(undefined);\nconst initialState = {\n  items: [],\n  total: 0,\n  itemCount: 0\n};\nfunction calculateTotal(items) {\n  return items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n}\nfunction calculateItemCount(items) {\n  return items.reduce((count, item) => count + item.quantity, 0);\n}\nfunction cartReducer(state, action) {\n  switch (action.type) {\n    case \"ADD_ITEM\":\n      {\n        const existingItemIndex = state.items.findIndex(item => item.id === action.payload.id);\n        let updatedItems;\n        if (existingItemIndex >= 0) {\n          updatedItems = [...state.items];\n          updatedItems[existingItemIndex] = {\n            ...updatedItems[existingItemIndex],\n            quantity: updatedItems[existingItemIndex].quantity + 1\n          };\n        } else {\n          updatedItems = [...state.items, {\n            ...action.payload,\n            quantity: 1\n          }];\n        }\n        return {\n          ...state,\n          items: updatedItems,\n          total: calculateTotal(updatedItems),\n          itemCount: calculateItemCount(updatedItems)\n        };\n      }\n    case \"REMOVE_ITEM\":\n      {\n        const updatedItems = state.items.filter(item => item.id !== action.payload);\n        return {\n          ...state,\n          items: updatedItems,\n          total: calculateTotal(updatedItems),\n          itemCount: calculateItemCount(updatedItems)\n        };\n      }\n    case \"UPDATE_QUANTITY\":\n      {\n        const {\n          id,\n          quantity\n        } = action.payload;\n        if (quantity <= 0) {\n          // If quantity is zero or negative, remove the item\n          return cartReducer(state, {\n            type: \"REMOVE_ITEM\",\n            payload: id\n          });\n        }\n        const updatedItems = state.items.map(item => item.id === id ? {\n          ...item,\n          quantity\n        } : item);\n        return {\n          ...state,\n          items: updatedItems,\n          total: calculateTotal(updatedItems),\n          itemCount: calculateItemCount(updatedItems)\n        };\n      }\n    case \"CLEAR_CART\":\n      return initialState;\n    default:\n      return state;\n  }\n}\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    const savedCart = localStorage.getItem(\"cart\");\n    if (savedCart) {\n      const parsed = JSON.parse(savedCart);\n      for (const item of parsed.items) {\n        dispatch({\n          type: \"ADD_ITEM\",\n          payload: item\n        });\n      }\n    }\n    setIsLoaded(true);\n  }, []);\n  useEffect(() => {\n    if (isLoaded) {\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    }\n  }, [state, isLoaded]);\n  const addItem = product => dispatch({\n    type: \"ADD_ITEM\",\n    payload: product\n  });\n  const removeItem = id => dispatch({\n    type: \"REMOVE_ITEM\",\n    payload: id\n  });\n  const updateQuantity = (id, quantity) => dispatch({\n    type: \"UPDATE_QUANTITY\",\n    payload: {\n      id,\n      quantity\n    }\n  });\n  const clearCart = () => dispatch({\n    type: \"CLEAR_CART\"\n  });\n  if (!isLoaded) return null;\n  return <CartContext.Provider value={{\n    state,\n    addItem,\n    removeItem,\n    updateQuantity,\n    clearCart\n  }}>\n      {children}\n    </CartContext.Provider>;\n}\n_s(CartProvider, \"LzNaNp0NvbFzzhDwnhtLJMh6SdA=\");\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
